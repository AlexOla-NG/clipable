// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Representation is an object representing the database table.
type Representation struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Bitrate   int       `boil:"bitrate" json:"bitrate" toml:"bitrate" yaml:"bitrate"`
	Width     int       `boil:"width" json:"width" toml:"width" yaml:"width"`
	Height    int       `boil:"height" json:"height" toml:"height" yaml:"height"`
	ClipID    string    `boil:"clip_id" json:"clip_id" toml:"clip_id" yaml:"clip_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *representationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L representationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepresentationColumns = struct {
	ID        string
	Bitrate   string
	Width     string
	Height    string
	ClipID    string
	CreatedAt string
}{
	ID:        "id",
	Bitrate:   "bitrate",
	Width:     "width",
	Height:    "height",
	ClipID:    "clip_id",
	CreatedAt: "created_at",
}

var RepresentationTableColumns = struct {
	ID        string
	Bitrate   string
	Width     string
	Height    string
	ClipID    string
	CreatedAt string
}{
	ID:        "representations.id",
	Bitrate:   "representations.bitrate",
	Width:     "representations.width",
	Height:    "representations.height",
	ClipID:    "representations.clip_id",
	CreatedAt: "representations.created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RepresentationWhere = struct {
	ID        whereHelperstring
	Bitrate   whereHelperint
	Width     whereHelperint
	Height    whereHelperint
	ClipID    whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"representations\".\"id\""},
	Bitrate:   whereHelperint{field: "\"representations\".\"bitrate\""},
	Width:     whereHelperint{field: "\"representations\".\"width\""},
	Height:    whereHelperint{field: "\"representations\".\"height\""},
	ClipID:    whereHelperstring{field: "\"representations\".\"clip_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"representations\".\"created_at\""},
}

// RepresentationRels is where relationship names are stored.
var RepresentationRels = struct {
	Clip string
}{
	Clip: "Clip",
}

// representationR is where relationships are stored.
type representationR struct {
	Clip *Clip `boil:"Clip" json:"Clip" toml:"Clip" yaml:"Clip"`
}

// NewStruct creates a new relationship struct
func (*representationR) NewStruct() *representationR {
	return &representationR{}
}

func (r *representationR) GetClip() *Clip {
	if r == nil {
		return nil
	}
	return r.Clip
}

// representationL is where Load methods for each relationship are stored.
type representationL struct{}

var (
	representationAllColumns            = []string{"id", "bitrate", "width", "height", "clip_id", "created_at"}
	representationColumnsWithoutDefault = []string{"bitrate", "width", "height", "clip_id"}
	representationColumnsWithDefault    = []string{"id", "created_at"}
	representationPrimaryKeyColumns     = []string{"id"}
	representationGeneratedColumns      = []string{}
)

type (
	// RepresentationSlice is an alias for a slice of pointers to Representation.
	// This should almost always be used instead of []Representation.
	RepresentationSlice []*Representation
	// RepresentationHook is the signature for custom Representation hook methods
	RepresentationHook func(context.Context, boil.ContextExecutor, *Representation) error

	representationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	representationType                 = reflect.TypeOf(&Representation{})
	representationMapping              = queries.MakeStructMapping(representationType)
	representationPrimaryKeyMapping, _ = queries.BindMapping(representationType, representationMapping, representationPrimaryKeyColumns)
	representationInsertCacheMut       sync.RWMutex
	representationInsertCache          = make(map[string]insertCache)
	representationUpdateCacheMut       sync.RWMutex
	representationUpdateCache          = make(map[string]updateCache)
	representationUpsertCacheMut       sync.RWMutex
	representationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var representationAfterSelectHooks []RepresentationHook

var representationBeforeInsertHooks []RepresentationHook
var representationAfterInsertHooks []RepresentationHook

var representationBeforeUpdateHooks []RepresentationHook
var representationAfterUpdateHooks []RepresentationHook

var representationBeforeDeleteHooks []RepresentationHook
var representationAfterDeleteHooks []RepresentationHook

var representationBeforeUpsertHooks []RepresentationHook
var representationAfterUpsertHooks []RepresentationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Representation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Representation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Representation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Representation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Representation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Representation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Representation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Representation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Representation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range representationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepresentationHook registers your hook function for all future operations.
func AddRepresentationHook(hookPoint boil.HookPoint, representationHook RepresentationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		representationAfterSelectHooks = append(representationAfterSelectHooks, representationHook)
	case boil.BeforeInsertHook:
		representationBeforeInsertHooks = append(representationBeforeInsertHooks, representationHook)
	case boil.AfterInsertHook:
		representationAfterInsertHooks = append(representationAfterInsertHooks, representationHook)
	case boil.BeforeUpdateHook:
		representationBeforeUpdateHooks = append(representationBeforeUpdateHooks, representationHook)
	case boil.AfterUpdateHook:
		representationAfterUpdateHooks = append(representationAfterUpdateHooks, representationHook)
	case boil.BeforeDeleteHook:
		representationBeforeDeleteHooks = append(representationBeforeDeleteHooks, representationHook)
	case boil.AfterDeleteHook:
		representationAfterDeleteHooks = append(representationAfterDeleteHooks, representationHook)
	case boil.BeforeUpsertHook:
		representationBeforeUpsertHooks = append(representationBeforeUpsertHooks, representationHook)
	case boil.AfterUpsertHook:
		representationAfterUpsertHooks = append(representationAfterUpsertHooks, representationHook)
	}
}

// One returns a single representation record from the query.
func (q representationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Representation, error) {
	o := &Representation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for representations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Representation records from the query.
func (q representationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepresentationSlice, error) {
	var o []*Representation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Representation slice")
	}

	if len(representationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Representation records in the query.
func (q representationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count representations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q representationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if representations exists")
	}

	return count > 0, nil
}

// Clip pointed to by the foreign key.
func (o *Representation) Clip(mods ...qm.QueryMod) clipQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClipID),
	}

	queryMods = append(queryMods, mods...)

	return Clips(queryMods...)
}

// LoadClip allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (representationL) LoadClip(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepresentation interface{}, mods queries.Applicator) error {
	var slice []*Representation
	var object *Representation

	if singular {
		var ok bool
		object, ok = maybeRepresentation.(*Representation)
		if !ok {
			object = new(Representation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepresentation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepresentation))
			}
		}
	} else {
		s, ok := maybeRepresentation.(*[]*Representation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepresentation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepresentation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &representationR{}
		}
		args = append(args, object.ClipID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &representationR{}
			}

			for _, a := range args {
				if a == obj.ClipID {
					continue Outer
				}
			}

			args = append(args, obj.ClipID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`clips`),
		qm.WhereIn(`clips.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Clip")
	}

	var resultSlice []*Clip
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Clip")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for clips")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clips")
	}

	if len(clipAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Clip = foreign
		if foreign.R == nil {
			foreign.R = &clipR{}
		}
		foreign.R.Representations = append(foreign.R.Representations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClipID == foreign.ID {
				local.R.Clip = foreign
				if foreign.R == nil {
					foreign.R = &clipR{}
				}
				foreign.R.Representations = append(foreign.R.Representations, local)
				break
			}
		}
	}

	return nil
}

// SetClip of the representation to the related item.
// Sets o.R.Clip to related.
// Adds o to related.R.Representations.
func (o *Representation) SetClip(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Clip) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"representations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"clip_id"}),
		strmangle.WhereClause("\"", "\"", 2, representationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClipID = related.ID
	if o.R == nil {
		o.R = &representationR{
			Clip: related,
		}
	} else {
		o.R.Clip = related
	}

	if related.R == nil {
		related.R = &clipR{
			Representations: RepresentationSlice{o},
		}
	} else {
		related.R.Representations = append(related.R.Representations, o)
	}

	return nil
}

// Representations retrieves all the records using an executor.
func Representations(mods ...qm.QueryMod) representationQuery {
	mods = append(mods, qm.From("\"representations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"representations\".*"})
	}

	return representationQuery{q}
}

// FindRepresentation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepresentation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Representation, error) {
	representationObj := &Representation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"representations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, representationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from representations")
	}

	if err = representationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return representationObj, err
	}

	return representationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Representation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no representations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(representationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	representationInsertCacheMut.RLock()
	cache, cached := representationInsertCache[key]
	representationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			representationAllColumns,
			representationColumnsWithDefault,
			representationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(representationType, representationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(representationType, representationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"representations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"representations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into representations")
	}

	if !cached {
		representationInsertCacheMut.Lock()
		representationInsertCache[key] = cache
		representationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Representation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Representation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	representationUpdateCacheMut.RLock()
	cache, cached := representationUpdateCache[key]
	representationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			representationAllColumns,
			representationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update representations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"representations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, representationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(representationType, representationMapping, append(wl, representationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update representations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for representations")
	}

	if !cached {
		representationUpdateCacheMut.Lock()
		representationUpdateCache[key] = cache
		representationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q representationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for representations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for representations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepresentationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), representationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"representations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, representationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in representation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all representation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Representation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no representations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(representationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	representationUpsertCacheMut.RLock()
	cache, cached := representationUpsertCache[key]
	representationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			representationAllColumns,
			representationColumnsWithDefault,
			representationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			representationAllColumns,
			representationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert representations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(representationPrimaryKeyColumns))
			copy(conflict, representationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"representations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(representationType, representationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(representationType, representationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert representations")
	}

	if !cached {
		representationUpsertCacheMut.Lock()
		representationUpsertCache[key] = cache
		representationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Representation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Representation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Representation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), representationPrimaryKeyMapping)
	sql := "DELETE FROM \"representations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from representations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for representations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q representationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no representationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from representations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for representations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepresentationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(representationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), representationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"representations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, representationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from representation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for representations")
	}

	if len(representationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Representation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepresentation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepresentationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepresentationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), representationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"representations\".* FROM \"representations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, representationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RepresentationSlice")
	}

	*o = slice

	return nil
}

// RepresentationExists checks if the Representation row exists.
func RepresentationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"representations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if representations exists")
	}

	return exists, nil
}

// Exists checks if the Representation row exists.
func (o *Representation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RepresentationExists(ctx, exec, o.ID)
}
